'use strict'

const fs = require('fs-extra')
const path = require('path')
const pify = require('pify')
const readdir = pify(fs.readdir)
const writeFile = pify(fs.writeFile)
const naturalSort = require('javascript-natural-sort')

const SUIR_DOCS_HTTP_ROOT = '//react.semantic-ui.com/'

/**
 * @module suir-story-util
 * @description utility class to auto-generate SUIR stories.  it enables us
 * to parse our own suir imported components and generate a "story" for
 * each.  the "story" is really just an iframe pointing to SUIR interactive docs.
 */
const suir = {
  /**
   * @property _componentGroups
   * @description SUIR Components are namespaced.  a call and resolve of init()
   * will populate the groups with the group name key w/ the component set names as
   * an array
   */
  _componentGroups: {
    /* elements: { TextArea, Input }, modules: { ... }, etc */
  },
  appendIFrames (components) {
    // 100% height renders a silly scroll bar
    return components.map(comp => {
      comp.iframe = `<iframe src="${comp.uri}" height='99%' width='100%' />`
      return comp
    })
  },
  appendURIs (components) {
    // e.g. http://react.semantic-ui.com/elements/button
    return components.map(comp => {
      comp.uri = `${SUIR_DOCS_HTTP_ROOT}/${this.mapToSUIRNamespace(comp.name)}/${comp.name}`
      return comp
    })
  },
  appendStories (components) {
    return components.map(comp => {
      comp.story = `.add('${comp.name}', () => ${comp.iframe})`
      return comp
    })
  },
  concatImportsAndStories (components) {
    var storyContent = components.map(comp => comp.story).join('\n')
    return [
      '// THIS FILE IS AUTO GENERATED BY THE BUILD. DO NOT MODIFY',
      `import React from 'react'`,
      `import { storiesOf } from '@kadira/storybook'`,
      `storiesOf('semantic-ui-react native', module)`,
      storyContent
    ].join('\n')
  },
  /**
   * Return set of component names, as named in their src/component/suir/<name>/
   * structure.
   * @param {string} storyRoot
   * @returns {Promise<Object>}
   */
  getComponents (storyRoot) {
    return readdir(storyRoot)
    .then(files => files.filter(basename => !basename.match(/\./)))
    .then(files => files.sort(naturalSort))
    .then(files => files.map(file => ({ name: file })))
  },
  /**
   * Required first call to parse the latest state from the SUIR package
   *
   * @param {any} builder
   * @returns {Promise}
   */
  init (builder) {
    return this.loadSUIRComponentGroups(builder)
  },
  /**
   * Reads the SUIR src/ to populate _componentGroups
   *
   * @param {any} builder
   * @returns {Promise}
   */
  loadSUIRComponentGroups (builder) {
    const suirSrcRoot = path.resolve(builder.projectRoot, 'node_modules', 'semantic-ui-react', 'src')
    return readdir(suirSrcRoot)
    .then(files => files.filter(file => !file.match(/\./) && file !== 'lib'))
    .then(componentTypes => {
      return Promise.all([
        componentTypes,
        Promise.all(componentTypes.map(type => readdir(path.resolve(suirSrcRoot, type))))
      ])
    })
    .then(([types, componentSets]) => componentSets.forEach((set, ndx) => { this._componentGroups[types[ndx]] = set }))
  },
  /**
   * Determines which SUIR namespace the provided component name belongs to.
   *
   * @param {any} componentName
   * @returns {string}
   */
  mapToSUIRNamespace (componentName) {
    for (var type in this._componentGroups) {
      var group = this._componentGroups[type]
      var rx = new RegExp(`^${componentName}$`, 'i')
      if (group.some(name => name.match(rx))) return type
    }
    throw new Error([
      `Oh WAT! what is this component: "${componentName}"?`,
      'Are you sure it has a corresponding named component in `node_modules/semantic-ui-react/src/<group>/`?',
      'We currently see the following components in the SUI source:\n',
      JSON.stringify(this._componentGroups, null, 2)
    ].join(' '))
  },
  /**
   * Persist fully defined stories
   *
   * @param {any} txt
   * @param {any} dest
   * @returns {Promise}
   */
  writeStories (txt, dest) {
    return writeFile(dest, txt)
  }
}

// eager bind methods for class-like behavior
for (var key in suir) if (typeof suir[key] === 'function') suir[key] = suir[key].bind(suir)

module.exports = suir
